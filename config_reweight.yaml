# reweighting is done to equalize the distributions across classes in input variables (often pT and Î·) to prevent the model from learning trivial features tied to class imbalances

selection:


preprocess:
  ### method: [manual, auto] - whether to use manually specified parameters for variable standardization
  method: manual
  ### data_fraction: fraction of events to use when calculating the mean/scale for the standardization
  #'fraction of events to load from each file; for training, the events are randomly selected for each epoch
  data_fraction: 0.5

new_variables:
   label_sample1 : isSignal
   label_sample2 : 1-isSignal
   data_variable : '0.5'
   dummy_variable : '0' 

inputs:
   points:
      length: 24
      pad_mode: wrap
      vars: 
         - [GenObject_eta, null]
         - [GenObject_phi, null]
   features:
      length: 24
      pad_mode: wrap
      vars: 
      ### [format 1]: var_name (no transformation)
      ### [format 2]: [var_name, 
      ###              subtract_by(optional, default=None, no transf. if preprocess.method=manual, auto transf. if preprocess.method=auto), 
      ###              multiply_by(optional, default=1), 
      ###              clip_min(optional, default=-5), 
      ###              clip_max(optional, default=5), 
      ###              pad_value(optional, default=0)]
         - [GenObject_pt, 40, 40]
         - GenObject_eta
         - GenObject_phi
         - GenObject_mass
         - GenObject_charge
         - GenObject_isJet
         - GenObject_isLepton
         - GenObject_isTau
         - GenObject_isNeutrino


labels:
   ### type can be `simple`, `custom`
   ### [option 1] use `simple` for binary/multi-class classification, then `value` is a list of 0-1 labels
   #type: custom
   #value: 
     # _label_: isSignal
   ### [option 2] otherwise use `custom` to define the label, then `value` is a map
   # type: custom
   # value: 
   #    truth_label: label.argmax(1)

   # !prej je bilo tako!:
   type: simple
   value: [label_sample1, label_sample2] #tko je bilo prej - one hot encoded

weights:
   use_precomputed_weights: false # let weaver compute the histograms
   reweight_method: ref
   reweight_vars:
      data_variable: [0, 1]   
      dummy_variable: [0, 1] 
   #reweight_vars:
   #   data_variable:
   #      - 0
   #      - 1

   reweight_classes:
      - label_sample1
      - label_sample2
   class_weights:
      - 1
      - 1